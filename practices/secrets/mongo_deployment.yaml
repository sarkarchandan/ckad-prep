apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: mongo-secrets-env
  name: mongo-secrets-env
data: # This data could be put to Secret as well but a ConfigMap is included just for the sake of completeness of the example
  MONGODB_DBNAME: codeWithDan # Desired database name for MongoDB
  MONGO_INITDB_ROOT_USERNAME: admin # Required field for MongoDB - Root user name

---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
# The reclaim policy applies to the persistent volumes not the storage class itself.
# pvs and pvcs that are created using that storage class will inherit the reclaim policy set here.
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer

---
# Note: While a local storage PV works, going with a more durable solution (NFS, cloud option, etc.) is recommended
# Adding this for demo purposes to run on Docker Desktop Kubernetes since it only supports a single Node
# https://kubernetes.io/blog/2018/04/13/local-persistent-volumes-beta/
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-pv
spec:
  capacity:
    storage: 1Gi
  # volumeMode block feature gate enabled by default with 1.13+
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  # StorageClass has a reclaim policy default so it'll be "inherited" by the PV
  # persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage

  # Note: If you're on Docker Desktop for Windows and using WSL2 you may get an error using the `local` property below.
  # https://github.com/DanWahlin/DockerAndKubernetesCourseCode/issues/15
  # Try changing the `local` property to `hostPath` in that scenario.
  local:
    path: /Users/I519774/workspace/personal/repos/k8s/tmp/data/db
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - docker-desktop

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-storage
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: mongo
  name: mongo
spec:
  serviceName: mongo
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      volumes: # Here we have created a two volumes one to be used by MongoDB for persistence, and other one is just a demo, which we are not going to use here.
        - name: mongo-volume # This volume is a PersistentVolume, which is requested via the PersistentVolumeClaim object.
          persistentVolumeClaim:
            claimName: mongo-pvc
        - name: secrets # This volume is for Secrets, which is created here just for the sake of demo. We are not going to use this volume to read the credentials.
          secret:
            secretName: db-passwords # This name refers to the Secret name, which we provided at the start of this example via command line
      containers:
        - env:
            - name: MONGODB_DBNAME
              valueFrom:
                configMapKeyRef: # We are getting the MONGODB_DBNAME configuration from ConfigMap as environment variable
                  key: MONGODB_DBNAME
                  name: mongo-secrets-env
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                configMapKeyRef: # We are getting the MONGO_INITDB_ROOT_USERNAME configuration from ConfigMap as environment variable
                  name: mongo-secrets-env
                  key: MONGO_INITDB_ROOT_USERNAME
            # Pull password from secrets
            - name: MONGO_INITDB_ROOT_PASSWORD # This is where we are actually making use of the Secret, which created earlier as environment variable.
              valueFrom:
                secretKeyRef:
                  name: db-passwords # We specify the name of the Secret used in the command line
                  key: db-password # We specify the key, which we provided as a literal in the command line
          image: mongo
          name: mongo
          ports:
            - containerPort: 27017
          resources: {}
          volumeMounts:
            - name: mongo-volume
              mountPath: /data/db
            # Example only - environment vars actually used here
            - name: secrets # This is an example of how to get the Secret key into a file but in this example we are not going to use this.
              mountPath: /etc/db-passwords
              readOnly: true